import { DataSource } from 'typeorm';
import * as argon2 from 'argon2';
import * as readline from 'readline';
import { AppDataSource } from '../../../data-source';

/**
 * Script ƒë·ªÉ t·∫°o admin user ƒë·∫ßu ti√™n
 * 
 * Ch·∫°y: ts-node src/admin/scripts/create-first-admin.ts
 */

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout,
});

function askQuestion(question: string): Promise<string> {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer);
    });
  });
}

async function createFirstAdmin() {
  try {
    console.log('=== T·∫†O ADMIN USER ƒê·∫¶U TI√äN ===\n');

    // K·∫øt n·ªëi database
    await AppDataSource.initialize();
    console.log('‚úì ƒê√£ k·∫øt n·ªëi database\n');

    const userRepository = AppDataSource.getRepository('User');

    // Ki·ªÉm tra xem ƒë√£ c√≥ admin ch∆∞a
    const existingAdmin = await userRepository.findOne({
      where: { role: 'admin' },
    });

    if (existingAdmin) {
      console.log('‚ö† ƒê√£ c√≥ admin user trong h·ªá th·ªëng:');
      console.log(`   Email: ${existingAdmin.email}`);
      console.log(`   ID: ${existingAdmin.id}\n`);

      const confirm = await askQuestion(
        'B·∫°n c√≥ mu·ªën t·∫°o th√™m admin user m·ªõi kh√¥ng? (y/n): ',
      );

      if (confirm.toLowerCase() !== 'y') {
        console.log('\nH·ªßy t·∫°o admin user m·ªõi.');
        rl.close();
        await AppDataSource.destroy();
        return;
      }
    }

    // Nh·∫≠p th√¥ng tin
    const email = await askQuestion('\nEmail: ');
    const password = await askQuestion('Password: ');
    const displayName = await askQuestion('Display Name (optional): ');
    const fullName = await askQuestion('Full Name (optional): ');

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existingUser = await userRepository.findOne({
      where: { email },
    });

    if (existingUser) {
      console.log('\n‚ö† Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng');
      const promote = await askQuestion(
        'B·∫°n c√≥ mu·ªën n√¢ng c·∫•p user n√†y l√™n admin kh√¥ng? (y/n): ',
      );

      if (promote.toLowerCase() === 'y') {
        existingUser.role = 'admin';
        existingUser.isActive = true;
        await userRepository.save(existingUser);

        console.log('\n‚úì ƒê√£ n√¢ng c·∫•p user l√™n admin:');
        console.log(`   ID: ${existingUser.id}`);
        console.log(`   Email: ${existingUser.email}`);
        console.log(`   Role: ${existingUser.role}`);
      } else {
        console.log('\nH·ªßy thao t√°c.');
      }

      rl.close();
      await AppDataSource.destroy();
      return;
    }

    // Hash password
    const passwordHash = await argon2.hash(password);

    // T·∫°o admin user
    const admin = userRepository.create({
      email,
      passwordHash,
      displayName: displayName || email.split('@')[0],
      fullName: fullName || null,
      role: 'admin',
      isActive: true,
    });

    await userRepository.save(admin);

    console.log('\n‚úì T·∫°o admin user th√†nh c√¥ng:');
    console.log(`   ID: ${admin.id}`);
    console.log(`   Email: ${admin.email}`);
    console.log(`   Role: ${admin.role}`);
    console.log(`   Display Name: ${admin.displayName}`);

    console.log('\nüìù H√£y s·ª≠ d·ª•ng email v√† password n√†y ƒë·ªÉ ƒëƒÉng nh·∫≠p v√† l·∫•y JWT token');
    console.log(
      '   POST /api/auth/login v·ªõi body: { "email": "' +
        email +
        '", "password": "..." }',
    );

    rl.close();
    await AppDataSource.destroy();
  } catch (error) {
    console.error('\n‚ùå L·ªói:', error);
    rl.close();
    if (AppDataSource.isInitialized) {
      await AppDataSource.destroy();
    }
    process.exit(1);
  }
}

createFirstAdmin();

